generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Section {
  id              Int     @id @default(autoincrement()) @db.TinyInt
  title           String  @db.VarChar(80)
  description     String? @db.VarChar(255)
  parentSectionId Int?    @db.TinyInt

  topics           Topic[]
  parentSection    Section?  @relation("SectionTree", fields: [parentSectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childrenSections Section[] @relation("SectionTree")

  @@index([parentSectionId])
}

model Topic {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(80)
  parentSectionId Int      @db.TinyInt
  characterId     Int      @db.SmallInt
  characterName   String   @db.VarChar(70)
  characterAvatar String
  charactersCount Int      @db.SmallInt
  wordsCount      Int      @db.SmallInt
  createdAt       DateTime @default(now())

  posts         Post[]
  parentSection Section   @relation(fields: [parentSectionId], references: [id], onDelete: Cascade)
  character     Character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([characterId])
  @@index([parentSectionId])
}

model Post {
  id              Int      @id @default(autoincrement()) @db.MediumInt
  topicId         Int      @db.MediumInt
  characterId     Int      @db.SmallInt
  characterName   String   @db.VarChar(70)
  characterAvatar String
  content         String   @db.Text
  charactersCount Int      @db.SmallInt
  wordsCount      Int      @db.SmallInt
  createdAt       DateTime @default(now())
  diceRoll        String?

  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([characterId])
  @@index([topicId])
}

model Character {
  id              Int      @id @default(autoincrement())
  userId          String   @unique
  avatar          String?
  icon            String?
  inventory       String?
  photoplayer     String?
  personality     String?  @db.Text
  appearance      String?  @db.Text
  backgroundStory String?  @db.Text
  story           String?  @db.Text
  age             Int?     @db.TinyInt
  height          Int?     @db.TinyInt
  weight          Int?     @db.TinyInt
  kekkeiGenkai    String?  @db.VarChar(20)
  gender          String?  @db.VarChar(40)
  name            String?  @db.VarChar(70)
  createdAt       DateTime @default(now())

  ninjutsu     Int @default(0) @db.TinyInt
  genjutsu     Int @default(0) @db.TinyInt
  taijutsu     Int @default(0) @db.TinyInt
  stamina      Int @default(1) @db.TinyInt
  strength     Int @default(0) @db.TinyInt
  speed        Int @default(0) @db.TinyInt
  intelligence Int @default(0) @db.TinyInt
  handSeals    Int @default(0) @db.TinyInt

  yin           Int @default(0) @db.TinyInt
  yang          Int @default(0) @db.TinyInt
  bukijutsu     Int @default(0) @db.TinyInt
  combat        Int @default(0) @db.TinyInt
  shurikenjutsu Int @default(0) @db.TinyInt
  fuinjutsu     Int @default(0) @db.TinyInt
  raiton        Int @default(0) @db.TinyInt
  futon         Int @default(0) @db.TinyInt
  doton         Int @default(0) @db.TinyInt
  suiton        Int @default(0) @db.TinyInt
  katon         Int @default(0) @db.TinyInt
  kekkaijutsu   Int @default(0) @db.TinyInt
  kyuinjutsu    Int @default(0) @db.TinyInt
  nagashi       Int @default(0) @db.TinyInt
  kanchi        Int @default(0) @db.TinyInt

  hp     Int @default(200) @db.SmallInt
  chakra Int @default(200) @db.SmallInt

  hpExtra     Int @default(0) @db.SmallInt
  chakraExtra Int @default(0) @db.SmallInt

  luck Int @default(0) @db.TinyInt

  posts         Post[]
  topics        Topic[]
  baseSkills    BaseSkill[]
  advantages    Advantage[]
  disadvantages Disadvantage[]
  roles         CharacterOnRoles[]

  rankId Int  @default(1) @db.TinyInt
  rank   Rank @relation(fields: [rankId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  clanId Int?  @db.TinyInt
  Clan   Clan? @relation(fields: [clanId], references: [id])

  villageId Int     @default(99)
  village   Village @relation(fields: [villageId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([villageId])
  @@index([clanId])
  @@index([rankId])
}

model Role {
  id   Int    @id @default(autoincrement()) @db.TinyInt
  name String @db.VarChar(70)

  charactersOnRole CharacterOnRoles[]
}

model Rank {
  id   Int    @id @default(autoincrement()) @db.TinyInt
  name String @db.VarChar(70)

  characters Character[]
}

model CharacterOnRoles {
  characterId Int
  Character   Character @relation(fields: [characterId], references: [id])

  roleId Int
  Role   Role @relation(fields: [roleId], references: [id])

  assignedAt DateTime @default(now())

  @@id([characterId, roleId])
  @@index([characterId])
  @@index([roleId])
}

model Village {
  id                Int    @id @default(autoincrement()) @db.TinyInt
  name              String @db.VarChar(70)
  kageId            Int?   @db.SmallInt
  numberOfNinjas    Int    @default(0) @db.SmallInt
  maxNumberOfNinjas Int    @db.SmallInt
  portugueseName    String @default("Vila Oculta da ") @db.VarChar(100)

  ninjas Character[]

  @@index([kageId])
}

model Clan {
  id                       Int     @id @default(autoincrement()) @db.TinyInt
  name                     String  @db.VarChar(12)
  numberOfNinjas           Int     @default(0) @db.SmallInt
  ninjasWithKekkeiGenkai   Int?    @default(0) @db.SmallInt
  hasKekkeiGenkai          Boolean @default(false)
  vacanciesForKekkeiGenkai Int?    @db.TinyInt
  description              String?
  longDescription          String?

  ninjas            Character[]
  InitialBaseSkills BaseSkill[] @relation("InitialBaseSkills")
  BaseSkill         BaseSkill[]

  @@index([name])
}

model Advantage {
  id                      Int     @id @default(autoincrement()) @db.TinyInt
  requiresManualApproval  Boolean @default(false)
  name                    String  @db.VarChar(70)
  requirements            String  @db.VarChar(32)
  points                  Int     @db.TinyInt
  type                    Int     @db.TinyInt
  requirementsDescription String
  effects                 String
  modifiers               Json?

  characters Character[]

  @@index([name])
}

model Disadvantage {
  id        Int    @id @default(autoincrement()) @db.TinyInt
  name      String @db.VarChar(70)
  type      String @db.VarChar(70)
  points    Int    @db.TinyInt
  effects   String
  modifiers Json?

  characters Character[]

  @@index([name])
}

model BaseSkill {
  id                Int    @id @default(autoincrement()) @db.TinyInt
  parentBaseSkillId Int?   @db.TinyInt
  name              String @db.VarChar(70)
  requirements      String @db.VarChar(70)
  vacancies         Int    @db.TinyInt
  description       String
  effects           String

  parentBaseSkill    BaseSkill?  @relation("BaseSkillTree", fields: [parentBaseSkillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childrenBaseSkills BaseSkill[] @relation("BaseSkillTree")

  characters       Character[]
  clans            Clan[]
  baseSkillOfClans Clan[]      @relation("InitialBaseSkills")

  @@index([name])
  @@index([parentBaseSkillId])
  @@index([id])
}
