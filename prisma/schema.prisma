generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Section {
  id              Int     @id @default(autoincrement()) @db.TinyInt
  title           String  @db.VarChar(80)
  description     String? @db.VarChar(255)
  parentSectionId Int?    @db.TinyInt

  topics           Topic[]
  parentSection    Section?  @relation("SectionTree", fields: [parentSectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childrenSections Section[] @relation("SectionTree")

  @@index([parentSectionId])
}

model Topic {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(80)
  parentSectionId Int      @db.TinyInt
  characterId     Int      @db.SmallInt
  characterName   String   @db.VarChar(70)
  characterAvatar String
  charactersCount Int      @db.SmallInt
  wordsCount      Int      @db.SmallInt
  createdAt       DateTime @default(now())

  posts         Post[]
  parentSection Section   @relation(fields: [parentSectionId], references: [id], onDelete: Cascade)
  character     Character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([characterId])
  @@index([parentSectionId])
}

model Post {
  id              Int      @id @default(autoincrement()) @db.MediumInt
  topicId         Int      @db.MediumInt
  characterId     Int      @db.SmallInt
  characterName   String   @db.VarChar(70)
  characterAvatar String
  content         String   @db.Text
  charactersCount Int      @db.SmallInt
  wordsCount      Int      @db.SmallInt
  createdAt       DateTime @default(now())
  diceRoll        String?

  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([characterId])
  @@index([topicId])
}

model Character {
  id              Int      @id @default(autoincrement())
  userId          String   @unique
  name            String?  @db.VarChar(70)
  avatar          String?
  icon            String?
  kekkeiGenkai    String?  @db.VarChar(20)
  age             Int?     @db.TinyInt
  height          Int?     @db.TinyInt
  weight          Int?     @db.TinyInt
  gender          String?  @db.VarChar(40)
  personality     String?  @db.Text
  appearance      String?  @db.Text
  photoplayer     String?
  backgroundStory String?  @db.Text
  story           String?  @db.Text
  inventory       String?
  createdAt       DateTime @default(now())

  posts         Post[]
  topics        Topic[]
  baseSkills    BaseSkill[]
  roles         CharacterOnRoles[]
  advantages    Advantage[]
  disadvantages Disadvantage[]

  rankId Int  @db.TinyInt
  rank   Rank @relation(fields: [rankId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  Clan   Clan? @relation(fields: [clanId], references: [id])
  clanId Int?  @db.TinyInt

  village   Village @relation(fields: [villageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  villageId Int     @default(99)

  @@index([userId])
  @@index([villageId])
  @@index([clanId])
  @@index([rankId])
}

model Role {
  id   Int    @id @default(autoincrement()) @db.TinyInt
  name String @db.VarChar(70)

  charactersOnRole CharacterOnRoles[]
}

model Rank {
  id   Int    @id @default(autoincrement()) @db.TinyInt
  name String @db.VarChar(70)

  characters Character[]
}

model CharacterOnRoles {
  Character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  Role        Role      @relation(fields: [roleId], references: [id])
  roleId      Int
  assignedAt  DateTime  @default(now())

  @@id([characterId, roleId])
  @@index([characterId])
  @@index([roleId])
}

model Village {
  id                Int    @id @default(autoincrement()) @db.TinyInt
  name              String @db.VarChar(70)
  kageId            Int?   @db.SmallInt
  numberOfNinjas    Int    @default(0) @db.SmallInt
  maxNumberOfNinjas Int    @db.SmallInt
  portugueseName    String @default("Vila Oculta da ") @db.VarChar(100)

  ninjas Character[]

  @@index([kageId])
}

model Clan {
  id                       Int     @id @default(autoincrement()) @db.TinyInt
  name                     String  @db.VarChar(12)
  numberOfNinjas           Int     @default(0) @db.SmallInt
  ninjasWithKekkeiGenkai   Int?    @default(0) @db.SmallInt
  hasKekkeiGenkai          Boolean @default(false)
  vacanciesForKekkeiGenkai Int?    @db.TinyInt
  description              String?
  longDescription          String?

  ninjas            Character[]
  InitialBaseSkills BaseSkill[] @relation("InitialBaseSkills")
  BaseSkill         BaseSkill[]

  @@index([name])
}

model Advantage {
  id                      Int    @id @default(autoincrement()) @db.TinyInt
  name                    String @db.VarChar(70)
  type                    String @db.VarChar(70)
  requirements            String @db.VarChar(70)
  requirementsDescription String
  points                  Int    @db.TinyInt

  characters Character[]

  @@index([name])
}

model Disadvantage {
  id     Int    @id @default(autoincrement()) @db.TinyInt
  name   String @db.VarChar(70)
  type   String @db.VarChar(70)
  points Int    @db.TinyInt

  characters Character[]

  @@index([name])
}

model BaseSkill {
  id                Int    @id @default(autoincrement()) @db.TinyInt
  parentBaseSkillId Int?   @db.TinyInt
  name              String @db.VarChar(70)
  requirements      String @db.VarChar(70)
  vacancies         Int    @db.TinyInt
  description       String
  effects           String

  parentBaseSkill    BaseSkill?  @relation("BaseSkillTree", fields: [parentBaseSkillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childrenBaseSkills BaseSkill[] @relation("BaseSkillTree")

  characters       Character[]
  clans            Clan[]
  baseSkillOfClans Clan[]      @relation("InitialBaseSkills")

  @@index([name])
  @@index([parentBaseSkillId])
  @@index([id])
}
