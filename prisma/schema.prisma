generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String      @id @default(cuid())
  name                  String?
  email                 String?     @unique
  emailVerified         DateTime?
  image                 String?
  birthdate             DateTime?
  createdAt             DateTime    @default(now())
  currentCharacter      Int?
  maxNumberOfCharacters Int?        @default(1)
  narutomakis           Decimal?    @default(0.0000) @db.Decimal(13, 4)
  accounts              Account[]
  sessions              Session[]
  Character             Character[]
  Village               Village[]
}

model Section {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  parentSectionId Int?
  parentSection   Section?  @relation("SectionTree", fields: [parentSectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childSections   Section[] @relation("SectionTree")
  Topic           Topic[]

  @@index([parentSectionId])
}

model Topic {
  id              Int       @id @default(autoincrement())
  title           String
  parentSectionId Int
  characterId     Int
  characterName   String
  characterAvatar String
  charactersCount Int
  wordsCount      Int
  createdAt       DateTime  @default(now())
  parentSection   Section   @relation(fields: [parentSectionId], references: [id], onDelete: Cascade)
  character       Character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Post            Post[]

  @@index([parentSectionId, characterId])
}

model Post {
  id              Int       @id @default(autoincrement())
  topicId         Int
  characterId     Int
  characterName   String
  characterAvatar String
  content         String
  charactersCount Int
  wordsCount      Int
  createdAt       DateTime  @default(now())
  topic           Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  character       Character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([topicId, characterId])
}

model Character {
  id              Int      @id @default(autoincrement())
  userId          String
  name            String?
  avatar          String?
  icon            String?
  village         Int?
  clan            String?
  rank            String?
  kekkeiGenkai    String?
  age             Int?
  height          Int?
  weight          Int?
  gender          String?
  personality     String?
  appearance      String?
  photoplayer     String?
  backgroundStory String?
  story           String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Topic           Topic[]
  Post            Post[]

  @@index([userId])
}

model Village {
  id                Int     @id @default(autoincrement())
  name              String
  kageId            String?
  cardPhoto         String?
  maxNumberOfNinjas Int
  portugueseName    String  @default("Vila Oculta da ")
  wallpaper         String?
  kage              User?   @relation(fields: [kageId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([kageId])
}
