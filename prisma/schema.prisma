generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Section {
  id              Int     @id @default(autoincrement()) @db.TinyInt
  title           String  @db.VarChar(80)
  description     String? @db.VarChar(255)
  parentSectionId Int?    @db.TinyInt

  topics        Topic[]
  parentSection Section?  @relation("SectionTree", fields: [parentSectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childSections Section[] @relation("SectionTree")

  @@index([parentSectionId])
}

model Topic {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(80)
  parentSectionId Int      @db.TinyInt
  characterId     Int      @db.SmallInt
  characterName   String   @db.VarChar(70)
  characterAvatar String
  charactersCount Int      @db.SmallInt
  wordsCount      Int      @db.SmallInt
  createdAt       DateTime @default(now())

  posts         Post[]
  parentSection Section   @relation(fields: [parentSectionId], references: [id], onDelete: Cascade)
  character     Character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([characterId])
  @@index([parentSectionId])
}

model Post {
  id              Int      @id @default(autoincrement()) @db.MediumInt
  topicId         Int      @db.MediumInt
  characterId     Int      @db.SmallInt
  characterName   String   @db.VarChar(70)
  characterAvatar String
  content         String   @db.Text
  charactersCount Int      @db.SmallInt
  wordsCount      Int      @db.SmallInt
  createdAt       DateTime @default(now())

  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([characterId])
  @@index([topicId])
}

model Character {
  id              Int      @id @default(autoincrement())
  userId          String   @unique
  name            String?  @db.VarChar(70)
  avatar          String?
  icon            String?
  villageId       Int      @default(0)
  clan            String?  @db.VarChar(10)
  rank            String?
  kekkeiGenkai    String?  @db.VarChar(20)
  age             Int?     @db.TinyInt
  height          Int?     @db.TinyInt
  weight          Int?     @db.TinyInt
  gender          String?  @db.VarChar(40)
  personality     String?  @db.Text
  appearance      String?  @db.Text
  photoplayer     String?
  backgroundStory String?  @db.Text
  story           String?  @db.Text
  createdAt       DateTime @default(now())

  topics Topic[]
  posts  Post[]

  village Village @relation(fields: [villageId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([villageId])
}

model Village {
  id                Int     @id @default(autoincrement()) @db.TinyInt
  name              String  @db.VarChar(70)
  kageId            Int?    @db.SmallInt
  cardPhoto         String?
  numberOfNinjas    Int     @default(0) @db.SmallInt
  maxNumberOfNinjas Int     @db.SmallInt
  portugueseName    String  @default("Vila Oculta da ") @db.VarChar(100)
  wallpaper         String?

  ninjas Character[]

  @@index([kageId])
}
